---

- name: "{{ execdl_name }} : Install apt prerequisites"
  become: yes
  apt:
    state: present
    name: zip
    update_cache: yes
    cache_valid_time: 1800

- name: "{{ execdl_name }} : check if executable can be run with correct version"
  command: "bash --login -c '{{ execdl_version_cmd }}'"
  register: version_cmd_result
  check_mode: no
  changed_when: False
  ignore_errors: true

- debug:
    msg: "stdout={{ version_cmd_result.stdout }}"

- debug:
    msg: "stderr={{ version_cmd_result.stderr }}"

- name: "{{ execdl_name }} : Install from download"
  when: version_cmd_result.rc != 0 or not (execdl_version_success_string in version_cmd_result.stdout or execdl_version_success_string in version_cmd_result.stderr)
  block:
    - name: "{{ execdl_name }} : Erase any existing download directory"
      file:
        path: "{{ execdl_download_dir }}/{{ execdl_name }}-{{ execdl_version }}"
        state: absent

    - name: "{{ execdl_name }} : Create download directory"
      file:
        path: "{{ execdl_download_dir }}/{{ execdl_name }}-{{ execdl_version }}"
        state: directory
        mode: 0755

    - name: "{{ execdl_name }} : Download"
      get_url:
        url: "{{ execdl_url }}"
        dest: "{{ execdl_download_dir }}/{{ execdl_name }}-{{ execdl_version }}/{{ execdl_downloaded_file }}"
        mode: 0644
        checksum: "{{ execdl_checksum }}"
      register: dl

    - debug:
        msg: "{{ dl.dest }}"
 
    - name: "{{ execdl_name }} : Extract archive"
      when: dl.dest is regex('\.zip$') or dl.dest is regex('\.tar\.gz$') or dl.dest is regex('\.tgz$')
      unarchive:
        remote_src: yes
        src: "{{ dl.dest }}"
        dest: "{{ execdl_download_dir }}/{{ execdl_name }}-{{ execdl_version }}"

    - name: "{{ execdl_name }} : Decompress gzipped file"
      when: dl.dest is regex('\.gz$') and dl.dest is not regex('\.tar\.gz$')
      shell: "gzip -dc {{ dl.dest }} > {{ dl.dest | splitext | first }}"

    - name: "{{ execdl_name }} : Create install directory"
      become: yes
      file:
        path: "{{ execdl_install_dir }}/{{ execdl_name }}-{{ execdl_version }}/bin/"
        state: directory
        mode: 0755

    - name: "{{ execdl_name }} : Install single executable"
      become: yes
      when: execdl_extracted_path != "" and execdl_extracted_path != "*"
      copy:
        remote_src: yes
        src: "{{ execdl_download_dir }}/{{ execdl_name }}-{{ execdl_version }}/{{ execdl_extracted_path }}"
        dest: "{{ execdl_install_dir }}/{{ execdl_name }}-{{ execdl_version }}/bin/{{ execdl_name }}"
        mode: 0755
    
    - name: "{{ execdl_name }} : Install many executables"
      become: yes
      when: execdl_extracted_path == "*"
      copy:
        remote_src: yes
        src: "{{ execdl_download_dir }}/{{ execdl_name }}-{{ execdl_version }}/"
        dest: "{{ execdl_install_dir }}/{{ execdl_name }}-{{ execdl_version }}/bin/"
        mode: 0755
# END conditional block

- name: "{{ execdl_name }} : Create symlink directory"
  become: yes
  file:
    path: "{{ execdl_symlink_dir }}"
    state: directory
    mode: 0755

- name: "{{ execdl_name }} : Create default symlink for this version"
  become: yes
  when: execdl_extracted_path != "*"
  file:
    src: "{{ execdl_install_dir }}/{{ execdl_name }}-{{ execdl_version }}/bin/{{ execdl_name }}"
    dest: "{{ execdl_symlink_dir }}/{{ execdl_name }}"
    mode: 0755
    state: link

- name: "{{ execdl_name }} : Create default symlink for this version"
  become: yes
  when: execdl_extracted_path == "*"
  file:
    src: "{{ execdl_install_dir }}/{{ execdl_name }}-{{ execdl_version }}/bin"
    dest: "{{ execdl_symlink_dir }}/bin"
    mode: 0755
    state: link

- name: "{{ execdl_name }} : Confirm executable is available and get version"
  command: "bash --login -c '{{ execdl_version_cmd }}'"
  register: version_cmd_result
  check_mode: no
  changed_when: False

- debug:
    msg: "stdout={{ version_cmd_result.stdout }}"

- debug:
    msg: "stderr={{ version_cmd_result.stderr }}"

- name: "{{ execdl_name }} : Confirm executable is desired version"
  assert:
    that:
      - execdl_version_success_string in version_cmd_result.stdout or execdl_version_success_string in version_cmd_result.stderr
